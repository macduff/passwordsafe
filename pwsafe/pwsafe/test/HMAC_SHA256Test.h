// HMAC_SHA256Test.h: Unit test for HMAC_SHA256 implementation
// Test vectors from RFC4231

#include "test.h"
#include "hmac.h"

class CHMAC_SHA256Test : public Test
{

 public:
  CHMAC_SHA256Test()
    {
    }

  void run()
    {
      hmac_sha256_test();
    }


  void hmac_sha256_test(void)
    {
      static const unsigned char key1[] =
        {0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
         0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
      static const unsigned char data1[] = 
        {0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65};
      static const unsigned char key2[] =
        {0x4a, 0x65, 0x66, 0x65}; //                          ("Jefe")
      static const unsigned char data2[] =
        {0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 
         0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, //  ("what do ya want ")
         0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
         0x69, 0x6e, 0x67, 0x3f}; //          ("for nothing?")
      static const struct {
        unsigned char *key;
        unsigned long keylen;
        unsigned char *data;
        unsigned long datalen;
        unsigned char hash[32];
      } tests[] = {
        { (unsigned char *)key1, 20,
          (unsigned char *)data1, 8,
          {0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53,
           0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b,
           0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7,
           0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7, }
        },
        { (unsigned char *)key2, sizeof(key2),
          (unsigned char *)data2, sizeof(data2),
          {0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e,
           0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 
           0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83,
           0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43, }
        },
      };

      int i;
      unsigned char tmp[32];
      for (i = 0; i < (int)(sizeof(tests) / sizeof(tests[0])); i++) {
        HMAC_SHA256 md(tests[i].key, tests[i].keylen);
        md.Update(tests[i].data, tests[i].datalen);
        md.Final(tmp);
        _test(memcmp(tmp, tests[i].hash, 32) == 0);
      }
    }
};

