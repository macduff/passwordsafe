/*
* Copyright (c) 2003-2006 Rony Shapiro <ronys@users.sourceforge.net>.
* All rights reserved. Use of the code is allowed under the
* Artistic License 2.0 terms, as specified in the LICENSE file
* distributed with this code, or available from
* http://www.opensource.org/licenses/artistic-license-2.0.php
*/
// HMAC_SHA1Test.h: Unit test for HMAC_SHA1 implementation
// Test vectors from RFC2202

#include "test.h"
#include "hmac.h"
#include "sha1.h"

class CHMAC_SHA1Test : public Test
{

public:
  CHMAC_SHA1Test()
  {
  }

  void run()
  {
    hmac_sha1_test();
  }


  void hmac_sha1_test(void)
  {
    static const unsigned char key1[] =
    {0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b};
    static const unsigned char data1[] = 
    {0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65};
    static const unsigned char key2[] =
    {0x4a, 0x65, 0x66, 0x65}; //                          ("Jefe")
    static const unsigned char data2[] =
    {0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 
    0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, //  ("what do ya want ")
    0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68,
    0x69, 0x6e, 0x67, 0x3f}; //          ("for nothing?")
    static const unsigned char key3[] =
    {0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa,}; //                          (20 bytes)
    static const unsigned char data3[] =
    {0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
    0xdd, 0xdd,}; //                          (50 bytes)

    static const unsigned char key4[] =
    {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19,}; //                 (25 bytes)
    static const unsigned char data4[] =
    {0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
    0xcd, 0xcd, }; //                              (50 bytes)

    /*
      test_case =     5
      key =           0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c
      key_len =       20
      data =          "Test With Truncation"
      data_len =      20
      digest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04
      digest-96 =     0x4c1a03424b55e07fe7f27be1

      test_case =     6
      key =           0xaa repeated 80 times
      key_len =       80
      data =          "Test Using Larger Than Block-Size Key - Hash Key First"
      data_len =      54
      digest =        0xaa4ae5e15272d00e95705637ce8a3b55ed402112

      test_case =     7
      key =           0xaa repeated 80 times
      key_len =       80
      data =          "Test Using Larger Than Block-Size Key and Larger
      Than One Block-Size Data"
      data_len =      73
      digest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91
      data_len =      20
      digest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04
      digest-96 =     0x4c1a03424b55e07fe7f27be1

      test_case =     6
      key =           0xaa repeated 80 times
      key_len =       80
      data =          "Test Using Larger Than Block-Size Key - Hash Key
      First"
      data_len =      54
      digest =        0xaa4ae5e15272d00e95705637ce8a3b55ed402112

      test_case =     7
      key =           0xaa repeated 80 times
      key_len =       80
      data =          "Test Using Larger Than Block-Size Key and Larger
      Than One Block-Size Data"
      data_len =      73
      digest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91
     */
    
    static const struct {
      unsigned char *key;
      unsigned long keylen;
      unsigned char *data;
      unsigned long datalen;
      unsigned char hash[20];
    } tests[] = {
      { (unsigned char *)key1, 20,
      (unsigned char *)data1, 8,
        {0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b,
         0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00, }
      },
      { (unsigned char *)key2, sizeof(key2),
      (unsigned char *)data2, sizeof(data2),
        {0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2, 0xd2, 0x74,
         0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c, 0x25, 0x9a, 0x7c, 0x79, }
      },
      { (unsigned char *)key3, 20,
      (unsigned char *)data3, 50,
        {0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd, 0x91, 0xa3,
         0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f, 0x63, 0xf1, 0x75, 0xd3, }
      },
      { (unsigned char *)key4, 25,
      (unsigned char *)data4, 50,
        {0x4c, 0x90, 0x07, 0xf4, 0x02, 0x62, 0x50, 0xc6, 0xbc, 0x84,
         0x14, 0xf9, 0xbf, 0x50, 0xc8, 0x6c, 0x2d, 0x72, 0x35, 0xda, }
      },
    };

    int i;
    unsigned char tmp[20];
    for (i = 0; i < (int)(sizeof(tests) / sizeof(tests[0])); i++) {
      HMAC<SHA1> md(tests[i].key, tests[i].keylen);
      md.Update(tests[i].data, tests[i].datalen);
      md.Final(tmp);
      _test(memcmp(tmp, tests[i].hash, 20) == 0);
    }
  }
};

